---
title: "example"
format: html
---

## **Introduction**

The Guide to create a Git repository from existing work, using the command line interface (CLI), managing branches, handling conflicts, and working with GitHub for collaboration.

# Setting Up a New Project in RStudio

## Step 1: Create a New Project

1.  Open RStudio.
2.  Go to **File \> New Project...**.
3.  Choose **New Directory \> New Project**.
4.  Name the project `assignment-2`

This sets up a new RStudio project in the local repository.

This sets up a new project in the local repository.

# Creating a Git Repository from Existing Work

## Step 2: Initialise Git

-   Open the RStudio Terminal and navigate to the root of your project.

-   Type

``` bash
git init
```

This command will create a `.git` folder for tracking the changes.

## Step 3: Add a .gitignore File

Create a `.gitignore` file to exclude unnecessary files:

``` bash
echo ".Rproj.user/" > .gitignore
git status
```

## Step 4: Add and Commit Files

Add all relevant files and make your initial commit:

``` bash
git add .
git commit -m "Initial commit with example.qmd"
```

------------------------------------------------------------------------

# Connecting to GitHub

## Step 5: Create and Push to GitHub

1.  Go to GitHub and create a new repository called `assignment2`. Don’t initialize it with a README or .gitignore.

2.  Back in the terminal, connect the remote:

``` bash
git remote add origin git@github.com:bhuv-c/ETC5513_Assignment2.git
git branch -M main
git push -u origin main
```

------------------------------------------------------------------------

# Branching and Collaboration

## Step 6: Create a Branch and Modify Files

```bash 
git branch testbranch
git branch
git switch testbranch
```
```bash
git add example.qmd 
git commit -m "Made changes on example.qmd in testbranch" 
git push -u origin testbranch
```

## Step 7: Add Data and Amend Commit

```bash
git add Data/
git commit --amend --no-edit
git push --force
```

## Step 8: Add Conflict in `main`

```bash
git add example.qmd
git commit -m "Conflicting change to example.qmd"
git push 
```


## Step 9: Merge and Resolve Conflict

```bash
git merge testbranch
# Resolve conflict manually in example.qmd
git add example.qmd
git commit -m "Merge testbranch into main and resolve conflict"
git push
```

---

# Tagging and Cleaning Up

## Step 10: Tag Commit

```bash
git tag -a v1.0 -m "Version 1.0 – stable release"
git push origin v1.0
```

## Step 11: Delete Branch

```bash
git branch -d testbranch
git push origin --delete testbranch
```

## Step 12: View Commit Log

```bash
git log --oneline
```

---

